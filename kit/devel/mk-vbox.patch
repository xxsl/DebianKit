diff '--exclude=*~' -Nur vbox.orig//include/internal/iprt.h vbox/include/internal/iprt.h
--- vbox.orig//include/internal/iprt.h	2010-10-13 10:45:15.000000000 +0000
+++ vbox/include/internal/iprt.h	2012-03-12 12:06:26.075872002 +0000
@@ -39,11 +39,15 @@
  && defined(MODULE) \
  && !defined(RT_NO_EXPORT_SYMBOL)
 # define bool linux_bool /* see r0drv/linux/the-linux-kernel.h */
-# ifndef AUTOCONF_INCLUDED
-#  include <linux/autoconf.h>
+# include <linux/version.h>
+# if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33)
+#  include <generated/autoconf.h>
+# else
+#  ifndef AUTOCONF_INCLUDED
+#   include <linux/autoconf.h>
+#  endif
 # endif
 # if defined(CONFIG_MODVERSIONS) && !defined(MODVERSIONS)
-#  include <linux/version.h>
 #  define MODVERSIONS
 #  if LINUX_VERSION_CODE < KERNEL_VERSION(2, 5, 71)
 #   include <linux/modversions.h>
diff '--exclude=*~' -Nur vbox.orig//include/iprt/types.h vbox/include/iprt/types.h
--- vbox.orig//include/iprt/types.h	2010-10-13 10:45:15.000000000 +0000
+++ vbox/include/iprt/types.h	2012-03-12 12:06:26.075872002 +0000
@@ -93,8 +93,13 @@
 #  define true linux_true
 #  define false linux_false
 #  define uintptr_t linux_uintptr_t
-#  ifndef AUTOCONF_INCLUDED
-#   include <linux/autoconf.h>
+#  include <linux/version.h>
+#  if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33)
+#   include <generated/autoconf.h>
+#  else
+#   ifndef AUTOCONF_INCLUDED
+#    include <linux/autoconf.h>
+#   endif
 #  endif
 #  include <linux/types.h>
 #  include <linux/stddef.h>
diff '--exclude=*~' -Nur vbox.orig//r0drv/linux/the-linux-kernel.h vbox/r0drv/linux/the-linux-kernel.h
--- vbox.orig//r0drv/linux/the-linux-kernel.h	2010-10-13 10:45:16.000000000 +0000
+++ vbox/r0drv/linux/the-linux-kernel.h	2012-03-12 12:06:26.075872002 +0000
@@ -34,10 +34,14 @@
 #include <iprt/types.h>
 #define bool linux_bool
 
-#ifndef AUTOCONF_INCLUDED
-# include <linux/autoconf.h>
-#endif
 #include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33)
+# include <generated/autoconf.h>
+#else
+# ifndef AUTOCONF_INCLUDED
+#  include <linux/autoconf.h>
+# endif
+#endif
 
 /* We only support 2.4 and 2.6 series kernels */
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2, 4, 0)
diff '--exclude=*~' -Nur vbox.orig//vboxdrv/SUPDrvInternal.h vbox/vboxdrv/SUPDrvInternal.h
--- vbox.orig//vboxdrv/SUPDrvInternal.h	2010-10-13 10:45:16.000000000 +0000
+++ vbox/vboxdrv/SUPDrvInternal.h	2012-03-12 12:06:26.075872002 +0000
@@ -75,10 +75,14 @@
     RT_C_DECLS_END
 
 #elif defined(RT_OS_LINUX)
-#   ifndef AUTOCONF_INCLUDED
-#    include <linux/autoconf.h>
-#   endif
 #   include <linux/version.h>
+#   if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33)
+#    include <generated/autoconf.h>
+#   else
+#    ifndef AUTOCONF_INCLUDED
+#     include <linux/autoconf.h>
+#    endif
+#   endif
 #   if defined(CONFIG_MODVERSIONS) && !defined(MODVERSIONS)
 #       define MODVERSIONS
 #       if LINUX_VERSION_CODE < KERNEL_VERSION(2, 5, 71)
diff '--exclude=*~' -Nur vbox.orig//vboxdrv/linux/SUPDrv-linux.c vbox/vboxdrv/linux/SUPDrv-linux.c
--- vbox.orig//vboxdrv/linux/SUPDrv-linux.c	2010-10-13 10:45:16.000000000 +0000
+++ vbox/vboxdrv/linux/SUPDrv-linux.c	2012-03-12 12:08:01.426011845 +0000
@@ -1,4 +1,4 @@
-/* $Rev: 60692 $ */
+/* $Rev: 69377 $ */
 /** @file
  * VBoxDrv - The VirtualBox Support Driver - Linux specifics.
  */
@@ -22,8 +22,6 @@
  *
  * You may elect to license modified versions of this file under the
  * terms and conditions of either the GPL or the CDDL or both.
- * Some lines of code to disable the local APIC on x86_64 machines taken
- * from a Mandriva patch by Gwenole Beauchesne <gbeauchesne@mandriva.com>.
  */
 
 /*******************************************************************************
@@ -58,16 +56,10 @@
 #ifdef CONFIG_VBOXDRV_AS_MISC
 # include <linux/miscdevice.h>
 #endif
-#ifdef CONFIG_X86_LOCAL_APIC
-# include <asm/apic.h>
-# include <asm/nmi.h>
-#endif
 #ifdef VBOX_WITH_SUSPEND_NOTIFICATION
 # include <linux/platform_device.h>
 #endif
 
-#include <iprt/mem.h>
-
 
 /*******************************************************************************
 *   Defined Constants And Macros                                               *
@@ -92,46 +84,6 @@
 # error "CONFIG_X86_HIGH_ENTRY is not supported by VBoxDrv at this time."
 #endif
 
-#ifdef CONFIG_X86_LOCAL_APIC
-
-/* If an NMI occurs while we are inside the world switcher the machine will
- * crash. The Linux NMI watchdog generates periodic NMIs increasing a counter
- * which is compared with another counter increased in the timer interrupt
- * handler. We disable the NMI watchdog.
- *
- * - Linux >= 2.6.21: The watchdog is disabled by default on i386 and x86_64.
- * - Linux <  2.6.21: The watchdog is normally enabled by default on x86_64
- *                    and disabled on i386.
- */
-# if defined(RT_ARCH_AMD64)
-#  if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 21) && !defined(VBOX_REDHAT_KABI)
-#   define DO_DISABLE_NMI 1
-#  endif
-# endif
-
-# if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 19)
-extern int nmi_active;
-#  define nmi_atomic_read(P)    *(P)
-#  define nmi_atomic_set(P, V)  *(P) = (V)
-#  define nmi_atomic_dec(P)     nmi_atomic_set(P, 0)
-# else
-#  define nmi_atomic_read(P)    atomic_read(P)
-#  define nmi_atomic_set(P, V)  atomic_set(P, V)
-#  define nmi_atomic_dec(P)     atomic_dec(P)
-# endif
-
-# ifndef X86_FEATURE_ARCH_PERFMON
-#  define X86_FEATURE_ARCH_PERFMON (3*32+9) /* Intel Architectural PerfMon */
-# endif
-# ifndef MSR_ARCH_PERFMON_EVENTSEL0
-#  define MSR_ARCH_PERFMON_EVENTSEL0 0x186
-# endif
-# ifndef ARCH_PERFMON_UNHALTED_CORE_CYCLES_PRESENT
-#  define ARCH_PERFMON_UNHALTED_CORE_CYCLES_PRESENT (1 << 0)
-# endif
-
-#endif /* CONFIG_X86_LOCAL_APIC */
-
 
 /*******************************************************************************
 *   Internal Functions                                                         *
@@ -182,7 +134,7 @@
 /** The module name. */
 #define DEVICE_NAME         "vboxdrv"
 
-#ifdef RT_ARCH_AMD64
+#if defined(RT_ARCH_AMD64) && !defined(CONFIG_DEBUG_SET_MODULE_RONX)
 /**
  * Memory for the executable memory heap (in IPRT).
  */
@@ -231,7 +183,7 @@
     .suspend = VBoxDrvSuspend,  /* before entering deep sleep */
     .resume  = VBoxDrvResume,   /* after wakeup from deep sleep */
     .freeze  = VBoxDrvSuspend,  /* before creating hibernation image */
-    .restore = VBoxDrvResume,   /* after wakeing up from hibernation */
+    .restore = VBoxDrvResume,   /* after waking up from hibernation */
 };
 # endif
 
@@ -263,114 +215,6 @@
 #endif /* VBOX_WITH_SUSPEND_NOTIFICATION */
 
 
-
-
-
-#ifdef CONFIG_X86_LOCAL_APIC
-# ifdef DO_DISABLE_NMI
-/** Stop AMD NMI watchdog (x86_64 only). */
-static int vboxdrvStopK7Watchdog(void)
-{
-    wrmsr(MSR_K7_EVNTSEL0, 0, 0);
-    return 1;
-}
-
-/** Stop Intel P4 NMI watchdog (x86_64 only). */
-static int vboxdrvStopP4Watchdog(void)
-{
-    wrmsr(MSR_P4_IQ_CCCR0,  0, 0);
-    wrmsr(MSR_P4_IQ_CCCR1,  0, 0);
-    wrmsr(MSR_P4_CRU_ESCR0, 0, 0);
-    return 1;
-}
-
-/** The new method of detecting the event counter */
-static int vboxdrvStopIntelArchWatchdog(void)
-{
-    unsigned ebx;
-
-    ebx = cpuid_ebx(10);
-    if (!(ebx & ARCH_PERFMON_UNHALTED_CORE_CYCLES_PRESENT))
-        wrmsr(MSR_ARCH_PERFMON_EVENTSEL0, 0, 0);
-    return 1;
-}
-
-/** Stop NMI watchdog. */
-static void vboxdrvStopApicNmiWatchdog(void *unused)
-{
-    int stopped = 0;
-
-    /* only support LOCAL and IO APICs for now */
-    if ((nmi_watchdog != NMI_LOCAL_APIC) &&
-        (nmi_watchdog != NMI_IO_APIC))
-        return;
-
-    if (nmi_watchdog == NMI_LOCAL_APIC)
-    {
-        switch (boot_cpu_data.x86_vendor)
-        {
-        case X86_VENDOR_AMD:
-            if (strstr(boot_cpu_data.x86_model_id, "Screwdriver"))
-               return;
-            stopped = vboxdrvStopK7Watchdog();
-            break;
-        case X86_VENDOR_INTEL:
-            if (cpu_has(&boot_cpu_data, X86_FEATURE_ARCH_PERFMON))
-            {
-                stopped = vboxdrvStopIntelArchWatchdog();
-                break;
-            }
-            stopped = vboxdrvStopP4Watchdog();
-            break;
-        default:
-            return;
-        }
-    }
-
-    if (stopped)
-        nmi_atomic_dec(&nmi_active);
-}
-
-/** Disable LAPIC NMI watchdog. */
-static void DisableLapicNmiWatchdog(void)
-{
-    BUG_ON(nmi_watchdog != NMI_LOCAL_APIC);
-
-    if (nmi_atomic_read(&nmi_active) <= 0)
-        return;
-
-    on_each_cpu(vboxdrvStopApicNmiWatchdog, NULL, 1, 1);
-
-    BUG_ON(nmi_atomic_read(&nmi_active) != 0);
-
-    /* tell do_nmi() and others that we're not active any more */
-    nmi_watchdog = NMI_NONE;
-}
-
-/** Shutdown NMI. */
-static void vboxdrvNmiCpuShutdown(void * dummy)
-{
-    unsigned int vERR, vPC;
-
-    vPC = apic_read(APIC_LVTPC);
-
-    if ((GET_APIC_DELIVERY_MODE(vPC) == APIC_MODE_NMI) && !(vPC & APIC_LVT_MASKED))
-    {
-        vERR = apic_read(APIC_LVTERR);
-        apic_write(APIC_LVTERR, vERR | APIC_LVT_MASKED);
-        apic_write(APIC_LVTPC,  vPC  | APIC_LVT_MASKED);
-        apic_write(APIC_LVTERR, vERR);
-    }
-}
-
-static void vboxdrvNmiShutdown(void)
-{
-    on_each_cpu(vboxdrvNmiCpuShutdown, NULL, 0, 1);
-}
-# endif /* DO_DISABLE_NMI */
-#endif /* CONFIG_X86_LOCAL_APIC */
-
-
 DECLINLINE(RTUID) vboxdrvLinuxUid(void)
 {
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29)
@@ -407,144 +251,6 @@
 {
     int       rc;
 
-#ifdef CONFIG_X86_LOCAL_APIC
-    /*
-     * If an NMI occurs while we are inside the world switcher the macine will crash.
-     * The Linux NMI watchdog generates periodic NMIs increasing a counter which is
-     * compared with another counter increased in the timer interrupt handler. Therefore
-     * we don't allow to setup an NMI watchdog.
-     */
-# if !defined(VBOX_REDHAT_KABI)
-    /*
-     * First test: NMI actiated? Works only works with Linux 2.6 -- 2.4 does not export
-     *             the nmi_watchdog variable.
-     */
-#  if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 19) || defined CONFIG_X86_64
-#   ifdef DO_DISABLE_NMI
-    if (nmi_atomic_read(&nmi_active) > 0)
-    {
-        printk(KERN_DEBUG DEVICE_NAME ": Trying to deactivate the NMI watchdog...\n");
-
-        switch (nmi_watchdog)
-        {
-            case NMI_LOCAL_APIC:
-                DisableLapicNmiWatchdog();
-                break;
-            case NMI_NONE:
-                nmi_atomic_dec(&nmi_active);
-                break;
-        }
-
-        if (nmi_atomic_read(&nmi_active) == 0)
-        {
-            vboxdrvNmiShutdown();
-            printk(KERN_DEBUG DEVICE_NAME ": Successfully done.\n");
-        }
-        else
-            printk(KERN_DEBUG DEVICE_NAME ": Failed!\n");
-    }
-#   endif /* DO_DISABLE_NMI */
-
-    /*
-     * Permanent IO_APIC mode active? No way to handle this!
-     */
-    if (nmi_watchdog == NMI_IO_APIC)
-    {
-        printk(KERN_ERR DEVICE_NAME
-               ": NMI watchdog in IO_APIC mode active -- refused to load the kernel module!\n"
-                        DEVICE_NAME
-               ": Please disable the NMI watchdog by specifying 'nmi_watchdog=0' at kernel\n"
-                        DEVICE_NAME
-               ": command line.\n");
-        return -EINVAL;
-    }
-
-    /*
-     * See arch/i386/kernel/nmi.c on >= 2.6.19: -1 means it can never enabled again
-     */
-    nmi_atomic_set(&nmi_active, -1);
-    printk(KERN_DEBUG DEVICE_NAME ": Trying to deactivate the NMI watchdog permanently...\n");
-
-    /*
-     * Now fall through and see if it actually was enabled before. If so, fail
-     * as we cannot deactivate it cleanly from here.
-     */
-#  else /* < 2.6.19 */
-    /*
-     * Older 2.6 kernels: nmi_watchdog is not initalized by default
-     */
-    if (nmi_watchdog != NMI_NONE)
-        goto nmi_activated;
-#  endif
-# endif /* >= 2.6.0 && !defined(VBOX_REDHAT_KABI) */
-
-    /*
-     * Second test: Interrupt generated by performance counter not masked and can
-     *              generate an NMI. Works also with Linux 2.4.
-     */
-    {
-        unsigned int v, ver, maxlvt;
-
-        v   = apic_read(APIC_LVR);
-        ver = GET_APIC_VERSION(v);
-        /* 82489DXs do not report # of LVT entries. */
-        maxlvt = APIC_INTEGRATED(ver) ? GET_APIC_MAXLVT(v) : 2;
-        if (maxlvt >= 4)
-        {
-            /* Read status of performance counter IRQ vector */
-            v = apic_read(APIC_LVTPC);
-
-            /* performance counter generates NMI and is not masked? */
-            if ((GET_APIC_DELIVERY_MODE(v) == APIC_MODE_NMI) && !(v & APIC_LVT_MASKED))
-            {
-# if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 31) \
-     && (defined(CONFIG_PERF_COUNTERS) || defined(CONFIG_PERF_EVENTS))
-                /* 2.6.31+: The performance counter framework will initialize the LVTPC
-                 * vector as NMI. We can't disable the framework but the kernel loader
-                 * script will do 'echo 2 > /proc/sys/kernel/perf_counter_paranoid'
-                 * which hopefilly prevents any usage of hardware performance counters
-                 * and therefore triggering of NMIs.
-                 * 2.6.32+: CONFIG_PERF_COUNTERS => CONFIG_PERF_EVENTS */
-                printk(KERN_ERR DEVICE_NAME
-                       ": Warning: 2.6.31+ kernel detected. Most likely the hardware performance\n"
-                                DEVICE_NAME
-                       ": counter framework which can generate NMIs is active. You have to prevent\n"
-                                DEVICE_NAME
-                       ": the usage of hardware performance counters by\n"
-                                DEVICE_NAME
-                       ":   echo 2 > /proc/sys/kernel/perf_counter_paranoid\n");
-                /* We can't do more here :-( */
-                goto no_error;
-# endif
-
-# if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 19) || defined CONFIG_X86_64
-                printk(KERN_ERR DEVICE_NAME
-                ": NMI watchdog either active or at least initialized. Please disable the NMI\n"
-                                DEVICE_NAME
-                ": watchdog by specifying 'nmi_watchdog=0' at kernel command line.\n");
-                return -EINVAL;
-# else /* < 2.6.19 */
-#  if !defined(VBOX_REDHAT_KABI)
-nmi_activated:
-#  endif
-                printk(KERN_ERR DEVICE_NAME
-                ": NMI watchdog active -- refused to load the kernel module! Please disable\n"
-                                DEVICE_NAME
-                ": the NMI watchdog by specifying 'nmi_watchdog=0' at kernel command line.\n");
-                return -EINVAL;
-# endif /* >= 2.6.19 */
-            }
-        }
-    }
-# if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 19)
-    printk(KERN_DEBUG DEVICE_NAME ": Successfully done.\n");
-#  if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 31) \
-      && (defined(CONFIG_PERF_COUNTERS) || defined(CONFIG_PERF_EVENTS))
-no_error:
-#  endif
-# endif /* >= 2.6.19 */
-#endif /* CONFIG_X86_LOCAL_APIC */
-
     /*
      * Check for synchronous/asynchronous TSC mode.
      */
@@ -598,8 +304,12 @@
         if (RT_SUCCESS(rc))
         {
 #ifdef RT_ARCH_AMD64
+# ifdef CONFIG_DEBUG_SET_MODULE_RONX
+            rc = RTR0MemExecInit(1572864 /* 1.5MB */);
+# else
             rc = RTR0MemExecDonate(&g_abExecMemory[0], sizeof(g_abExecMemory));
-            printk("VBoxDrv: dbg - g_abExecMemory=%p\n", (void *)&g_abExecMemory[0]);
+            printk(KERN_DEBUG "VBoxDrv: dbg - g_abExecMemory=%p\n", (void *)&g_abExecMemory[0]);
+# endif
 #endif
             Log(("VBoxDrv::ModuleInit\n"));
 
@@ -618,13 +328,7 @@
                     if (rc == 0)
 #endif
                     {
-                        printk(KERN_INFO DEVICE_NAME ": TSC mode is %s, kernel timer mode is "
-#ifdef VBOX_HRTIMER
-                               "'high-res'"
-#else
-                               "'normal'"
-#endif
-                               ".\n",
+                        printk(KERN_INFO DEVICE_NAME ": TSC mode is %s, kernel timer mode is 'normal'.\n",
                                g_DevExt.pGip->u32Mode == SUPGIPMODE_SYNC_TSC ? "'synchronous'" : "'asynchronous'");
                         LogFlow(("VBoxDrv::ModuleInit returning %#x\n", rc));
                         printk(KERN_DEBUG DEVICE_NAME ": Successfully loaded version "
