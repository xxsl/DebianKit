#!/bin/sh

case ${0%/*} in ${0}) DIR=${PWD};;*) case ${0} in /*) DIR=${0%/*};;*) DIR=${PWD}/${0%/*};DIR=${DIR%%/.};;esac;;esac

# Note: on i386, qemu may execute armel code as well. Reason to query i386 fist here.
CPU=$(${DIR}/i386/busybox ash -c "echo i386" 2>&- || ${DIR}/armel/busybox ash -c "echo armel" 2>&-)
case ${CPU} in "") echo "Unsupported CPU or architecture." >&2 && exit 1;;esac
${DIR}/${CPU}/busybox ash -c "test /proc/$$/exe -ef ${DIR}/${CPU}/busybox" || exec ${DIR}/${CPU}/busybox ash ${0} "$@"
# Our busybox shell from here on

# Note: Space doesn't function with busybox-remount currently
MNT="/tmp/deb-ia;n#\"'\$"
IMG="/media/SD_4GB/debian.img"
USE_BIND=0
PIVOT_BIND=1
DEBUG=true

source ${DIR}/functions

pivot_me() {
	# Swaps current root with ramdisk mounted to $1

	rw=$(get_mount_rw "/")
	debug_mount -t tmpfs none "${1%/}" || return 1
	mkdir "${1%/}/oldroot" || return 1

	local i
	for i in /*;do
		if [ "0" = "${PIVOT_BIND}" ] || [ -z $(get_mount "${i}") ];then
			if [ "lost+found" = "${i#/}" ] || [ 0 = $(ls -A "${i}"|wc -l) ];then
				# Empty directory under root
				mkdir "${1%/}/${i#/}" || return 1
			else
				if [ "2" = "${PIVOT_BIND}" ] && [ ! -h "${i}" ] && [ -d "${i}" ];then
					mkdir "${1%/}/${i#/}" || return 1
					debug_mount --bind "${i}" "${1%/}/${i#/}" || return 1
				else
					# Link file or directory under root
					ln -s "/oldroot/${i#/}" "${1%/}/${i#/}" || return 1
				fi
			fi
		else
			mkdir "${1%/}/${i#/}" || return 1
		fi
	done

	case ${PIVOT_BIND} in 0);;*)
		for i in $(cut -d' ' -f2 /proc/mounts);do
			case ${i} in /);;*)
				# Ignore mounts with no mountdir
				if [ -d "${1%/}/${i#/}" ];then
					debug_mount --bind "${i}" "${1%/}/${i#/}" || return 1
				fi
			;;esac
		done
	;;esac

	pivot_root "${1%/}" "${1%/}/oldroot" || return 1
	if [ "ro" = "$rw" ] && [ -b $(get_mount "/oldroot") ];then
		debug_mount / -o remount,ro || return 1
	fi
	return 0
}

unpivot_me() {
	# Reverts pivot_me. Note that this works reliably only with PIVOT_BIND=0

	pivot_root /oldroot "${1%/}" || return 1
	if debug_mount "${1%/}" -o remount,rw;then
		# Fails if e.g. mountpoint with spaces, last umount does all the work then 
		local i
		for i in $(cut -d' ' -f2 /proc/mounts|sed '1!G;h;$!d');do
			# Umount done in reverse order
			case ${i} in "${1%/}"/*)
				# Ignore errors, last umount will fail anyhow
				debug_umount "${i}"
			;;esac
		done
		for i in "${1%/}"/*;do
			if [ -h "${i}" ];then
				rm "${i}" || return 1
			elif [ -d "${i}" ];then
				rmdir "${i}" || return 1
			fi
		done
	fi
	debug_umount "${1%/}" || return 1
	return 0
}

case $1 in m)
	cat /proc/mounts > /tmp/old.txt
	test -d "${MNT}" || mkdir "${MNT}"
	pivot_me "${MNT}"
;;u)
	test -d "${MNT}" || mkdir "${MNT}"
	unpivot_me "${MNT}"
	cat /proc/mounts > /tmp/new.txt
	diff /tmp/old.txt /tmp/new.txt
;;esac
